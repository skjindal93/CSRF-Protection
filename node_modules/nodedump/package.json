{
  "name": "nodedump",
  "version": "0.0.7",
  "description": "Outputs variables in a visual, easy to read format based on Adobe ColdFusion's CFDump tag. Think of it as console.log on steroids.",
  "main": "nodedump.js",
  "scripts": {},
  "repository": {
    "type": "git",
    "url": "https://github.com/ragamufin/nodedump.git"
  },
  "keywords": [
    "debug",
    "node",
    "module",
    "dump",
    "variable",
    "log",
    "cfdump"
  ],
  "author": {
    "name": "andrew hewitt"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ragamufin/nodedump/issues"
  },
  "readme": "nodedump\n========\nOutputs variables in a visual, easy to read format based on Adobe ColdFusion's `CFDump` tag with enhancements unique to node.js such as the syntax highlighting of functions. Think of it as `console.log` on steroids.\n\nnodedump works both server and client side.\n\nFor example, simply doing `nodedump(user)` gives us:\n\n![nodedump example](https://raw.github.com/ragamufin/nodedump/master/images_for_readme/nodedump-user.png \"nodedump of variable 'user'\")\n\nThe above is a dump of the variable `user` created like so:\n```javascript\nsignIn = function(username, password){\n\t// validate username and password\n\tif(!validate(username, password))\n\t\treturn false;\n\telse \n\t\tupdateSession();\n\t\n\t// user is signedIn\n\tthis.signedIn = true;\n\treturn true;\n};\n\nvar user = {\n\tfirstName: 'Charles'\n\t,lastName: 'Teague'\n\t,age: 21\n\t,signedIn: false\n\t,signIn: signIn\n\t,projects: [\n\t\t{\n\t\t\tname: 'Allaire Spectra'\n\t\t\t,status: 'Horrible death'\n\t\t}\n\t\t,{\n\t\t\tname: 'ColdFusion 4.5'\n\t\t\t,status: 'Been there done that'\n\t\t}\n\t]\n};\n```\nWith `console.log(user)` we get:\n```javascript\n{ firstName: 'Charles',\n  lastName: 'Teague',\n  age: 21,\n  signedIn: false,\n  signIn: [Function],\n  projects:\n   [ { name: 'Allaire Spectra', status: 'Horrible death' },\n     { name: 'ColdFusion 4.5', status: 'Been there done that' } ] }\n```\nWhich is the typical output we have to rely on usually to do our debugging. As our variables become more complicated this becomes a painful way to know what's going on within them.\n\n\nnodedump is based on the `CFDump` tag of Adobe's ColdFusion which has long been a unique feature allowing developers to understand what's in any variable. Once you get accustomed to the color coding and layout of dumped output, your brain will be able to quickly see and understand what's in any variable you dump with just a glance. Pretty much all the options available for `CFDump` have been included in nodedump.\n\n\nINSTALLATION\n------------\n\nRun this from your bash or command line:\n\n```bash\n$ [sudo] npm install nodedump\n```\n\n\nUSAGE \n-----\n\nFirst, `require` nodedump:\n```javascript\nrequire('nodedump');\n```\n\nThis will create a global function called `nodedump`. Then in your view or wherever you output to the browser, whenever you want to dump the contents of a variable do:\n```javascript\nnodedump(vartodump);\n```\n\nSee the [calling nodedump section](#calling-nodedump \"calling nodedump section\") section for the various ways to call and name the function that is used for dumping.\n\nCLIENT-SIDE\n-----------\n\nTo use nodedump client-side simply include the `nodedump-client.js` (available in the nodedump-client directory) file in your page and then dump any variable you'd like. For instance:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>nodedump client side example</title>\n\t<script src=\"nodedump-client-min.js\"></script>\n</head>\n<body>\n\t<script>\n\t    // dump something\n\t    document.write(nodedump(location));\n\t</script>\n</body>\n</html>\n```\n\nEXAMPLE \n-------\nThe following example sets up a server, creates a test object and dumps it to the browser. Try it!\n```javascript\nvar http = require('http');\nnodedump = require('nodedump').dump;\n\nsignIn = function(username, password){\n\t// validate username and password\n\tif(!validate(username, password))\n\t\treturn false;\n\telse \n\t\tupdateSession();\n\t\n\t// user is signedIn\n\tthis.signedIn = true;\n\treturn true;\n};\n\nvar server = http.createServer(function(request, response) {\n\tconsole.log('Request received',new Date());\n\tconsole.log('url:',request.url);\n\t// skip requests for favicon\n\tif (request.url.indexOf('favicon.ico') > -1) {\n\t\tconsole.log('favicon requested');\n\t\tresponse.writeHead(500);\n\t\tresponse.end();\n\t\tconsole.log('Request ended');\n\t\treturn;\n\t}\n\t\n\t// start output to the browser\n\tresponse.writeHead(200, {\"Content-Type\": \"text/html\"});\n\t\n\tvar user = {\n\t\tfirstName: 'Charles'\n\t\t,lastName: 'Teague'\n\t\t,age: 21\n\t\t,signedIn: false\n\t\t,signIn: signIn\n\t\t,projects: [\n\t\t\t{\n\t\t\t\tname: 'Allaire Spectra'\n\t\t\t\t, status: 'Horrible death'\n\t\t\t}\n\t\t\t,{\n\t\t\t\tname: 'ColdFusion 4.5'\n\t\t\t\t,status: 'Been there done that'\n\t\t\t}\n\t\t]\n\t};\n\t\n\t//capture dump\n\tvar output = nodedump(user);\n\t\n\t// write response to the browser\n\tresponse.write(\n\t\t'<html>'\n\t\t\t+ '<head>'\n\t\t\t\t+ '<title>nodedump example!</title>'\n\t\t\t+ '</head>'\n\t\t\t+'<body>'\n\t\t\t\t+output\n\t\t\t+'</body>'\n\t\t+'</html>'\n\t);\n\tresponse.end();\n\n\tconsole.log('Request ended');\n\t//console.log('global.bnodedumpinited',global.bnodedumpinited);\n}).listen(3000);\n\nconsole.log(\"Server has started.\");\n```\n\nOPTIONS\n---------\nOptions can be passed as an object whenever you `nodedump` a variable as the second parameter, e.g. `nodedump(vartodump, options)`\n\nThe available options are:\n* `label` - String. Output on the header of the dump.\n* `expand` - Boolean/Array. Defaults to `true`. The dump can be collapsed entirely by passing `false`. Simply click on the headers in order to expand them. An array of types can be passed and the keys of those objects will be expanded while everything else collapsed. For e.g. `['Array', 'Object', 'Function']`\n* `show` - Array. A list of object keys / array positions to show. Others not in the list will be hidden.\n* `hide` - Array. A list of object keys / array positions to hide.\n* `top` - Number. The number of array positions of the dump variable to show. For objects, this is the number of keys of the top level to show.\n* `levels` - Number. How many nested levels of an object to dump down to.\n* `sortKeys` - Boolean. Defaults to `true`. Tells nodedump to output the keys of objects sorted alphabetically. If `false`, keys will be output in whatever order node.js returns them (usually the order in which they were added).\n* `syntaxHighlight` - Boolean. Defaults to `true`. Tells whether or not the dump of functions should be syntax highlighted (color-coded).\n* `dumpFunctionName` - String. Defaults to `'nodedump'`. Name to use for the nodedump function. E.g. if this is changed to `'dump'` then in addition to doing `nodedump(vartodump)` you can do `dump(vartodump)`.\n\nOPTIONS IN ACTION\n-----------------\n###`expand` and `label`\n\n```javascript\nnodedump(user1, {expand: false, label: 'User1'});\nnodedump(user2, {expand: false, label: 'User 2'});\n```\n\nOutputs:\n\n![nodedump example of 'expand' and 'label' options](https://raw.github.com/ragamufin/nodedump/master/images_for_readme/nodedump-expandlabel.png \"nodedump example of 'expand' and 'label' options\")\n\nClicking on the header of collapsed sections will expand them.\n\n###`top` with an object\n\n```javascript\nnodedump(user, {top:4});\n```\n\nOutputs:\n\n![nodedump example of 'top' with an object](https://raw.github.com/ragamufin/nodedump/master/images_for_readme/nodedump-topObject.png \"nodedump example of 'top' with an object\")\n\nNotice that though the object has 6 keys, only the top 4 were output.\n\n###`top` with an array\n\n```javascript\nnodedump(user.projects, {top:1});\n```\n\nOutputs:\n\n![nodedump example of 'top' with an array](https://raw.github.com/ragamufin/nodedump/master/images_for_readme/nodedump-topArray.png \"nodedump example of 'top' with an array\")\n\n###`levels`\n\n```javascript\nnodedump(user, {levels:2});\n```\n\nOutputs:\n\n![nodedump example of 'levels' option](https://raw.github.com/ragamufin/nodedump/master/images_for_readme/nodedump-levels.png \"nodedump example of 'levels' option\")\n\nNotice that in the projects sub-array that the 3rd level is **not** shown.\n\n###`show`\n\n```javascript\nnodedump(user, {show:['signedIn','age','lastName']});\n```\n\nOutputs:\n\n![nodedump example of 'show' option](https://raw.github.com/ragamufin/nodedump/master/images_for_readme/nodedump-show.png \"nodedump example of 'show' option\")\n\n###`hide`\n\n```javascript\nnodedump(user, {hide:['projects']});\n```\n\nOutputs:\n\n![nodedump example of 'hide' option](https://raw.github.com/ragamufin/nodedump/master/images_for_readme/nodedump-hide.png \"nodedump example of 'hide' option\")\n\n\nOVERRIDING DEFAULT OPTIONS\n--------------------------\n\nDefault options can be overriden by calling the `init` method on nodedump. E.g.\n\n```javascript\nrequire('nodedump').init({\n\tdumpFunctionName: 'dump'\n\t,top: 100\n\t,sortKeys: false\n\t,expand: false\n});\n```\n\nThe above would set the default for all nodedumps as follows:\n* You could do `dump(vartodump)` instead `nodedump(vartodump)`. Keep in mind that the latter would still work.\n* Output no more than 100 top keys.\n* Not sort object keys.\n* Show all nodedumps collapsed.\n\nCALLING NODEDUMP\n----------------\n\n`require('nodedump')` will create the global function `nodedump` that can be used to dump variables. As you've seen with the [dumpFunctionName option](#options \"dumpFunctionName option\") you can add another name for the function and use that instead. Another way to do this is to set your variable directly to the `dump` function. E.g.:\n\n```javascript\nd = require('nodedump').dump;\n```\n\nSo now you'd be able to dump variables using `d(vartodump)`.\n\nYou can do this even when initializing nodedump with default options:\n\n```javascript\nd = require('nodedump').init({ expand: false }).dump;\n```\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/ragamufin/nodedump",
  "_id": "nodedump@0.0.7",
  "_from": "nodedump@"
}
